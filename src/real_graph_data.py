import osmnx as ox
import networkx as nx
import math

coordinates = [(55.7558, 37.6173, 582), # 1
               (55.75306720944432, 37.64663788242695, 326), # 2
               (55.758047804032884, 37.63808042662938, 425), # 3
               (55.74697130685938, 37.64231025473431, 335), # 4
               (55.74117381163911, 37.65136893283736, 212), # 5
               (55.73919179969651, 37.67209020054558, 266), # 6
               (55.73287690643205, 37.6656476588703, 320), # 7
               (55.711718873388676, 37.73691903969308, 446), # 8
               (55.704150341406994, 37.75094571427627, 550), # 9
               (55.710967578642155, 37.74901394462396, 491), # 10
               (55.71001556271069, 37.76402132852002, 700), # 11
               (55.90416080362762, 37.577513948782894, 649), # 12
               (55.925842067469695, 37.59999628600599, 705), # 13
               (55.74163056685533, 37.55541427121336, 550), # 14
               (55.706405111718034, 37.77504462240723, 680), # 15
               (55.70269294341697, 37.75745750238155, 610), # 16
               (55.71678864906718, 37.7788128696524, 360), # 17
               (55.7150691018827, 37.747947175947225, 730), # 18
               (55.72571205289444, 37.72901586002036, 563), # 19
               (55.71734955166461, 37.78366472011928, 300), # 20
               (55.71083676088709, 37.76995601575639, 720), # 21
               (55.761626231725195, 37.55362357355983, 460), # 22
               (55.77542685849858, 37.592884291059924, 350), # 23
               (55.89390479676437, 37.57703827257323, 630), # 24
               (55.89457477738833, 37.59631009467917, 639), # 25
               (55.74276873053226, 37.58970062389765, 412), # 26
               (55.74160497450229, 37.63406238917792, 432), # 27
               (55.70273284432044, 37.75488162322311, 607), # 28
               (55.713617980433256, 37.776246298037776, 590), # 29
               (55.84764703606591, 37.44140161092126, 582), # 30
               (55.73388378144212, 37.682646619010946, 490), # 31
               (55.71473400929179, 37.75099337582378, 735), # 32
               (55.70794728389302, 37.770461845624155, 585), # 33
               (55.70391212072026, 37.74446148015891, 512), # 34
               (55.72291696358799, 37.624018914347246, 547), # 35
               (55.741173049709296, 37.686857425526966, 465), # 36
               (55.702503080537646, 37.75548910824423, 620), # 37
               (55.70327441905285, 37.76962232825617, 700), # 38
               (55.70658491008125, 37.78841090358121, 700), # 39
               (55.71198272875566, 37.79091134258485, 565), # 40
               (55.71521452948363, 37.77885053886011, 453), # 41
               (55.71397733890919, 37.795432949204766, 490), # 42
               (55.71194169274853, 37.79085231759658, 569), # 43
               (55.706202302178944, 37.80971241670014, 719), # 44
               (55.71035489259901, 37.79974855596095, 742), # 45
               (55.707406507715724, 37.78680167373492, 690), # 46
               (55.70984068692149, 37.77449763005366, 702), # 47
               (55.702325993069984, 37.771116366222174, 790), # 48
               (55.70325217778439, 37.75834270249131, 662), # 49
               (55.70228696910512, 37.771361685996304, 795), # 50
               ]

def create_osmnx_graph(latitude, longitude, distance):
    place_location = (latitude, longitude)
    # returns the graph representation of different connections based on the real OpenStreetMap data
    g_osm = ox.graph_from_point(place_location, dist=distance, network_type='drive')  # network_type='drive'
    g_nx = nx.Graph()
    # add the data from real graph into networkx graph
    for u, v, data in g_osm.edges(data=True):
        length = math.floor(data.get('length', 1.0))
        g_nx.add_edge(u, v, weight=length)

    # returns a copy of the graph g_nx with the nodes relabeled using consecutive integers
    g_nx = nx.convert_node_labels_to_integers(g_nx)

    # fig, ax = ox.plot_graph(g_osm, node_size=10, edge_linewidth=2)
    return g_nx


def cut_unnecessary_graph_edges(g, needed_edges):
    # copy the initial graph
    updated_g = g.copy()
    num_edges = updated_g.number_of_edges()
    # remove the edges until the graph has the needed number of edges and is connected
    while num_edges > needed_edges:
        edges_list = list(updated_g.edges(data=True))
        for (u, v, w) in edges_list:
            if num_edges <= needed_edges:
                break
            updated_g.remove_edge(u, v)
            if nx.is_connected(updated_g):
                num_edges -= 1
            else:
                updated_g.add_edge(u, v, **w)

    return updated_g